/// Internal data structures for simulating the MIPS instruction set.
///
/// DO NOT CHANGE -- part of the machine emulation
///
/// Copyright (c) 1992-1993 The Regents of the University of California.
///               2016-2021 Docentes de la Universidad Nacional de Rosario.
/// All rights reserved.  See `copyright.h` for copyright notice and
/// limitation of liability and disclaimer of warranty provisions.


#include "encoding.hh"


const OpInfo OP_TABLE[] = {
    { SPECIAL,  RFMT }, { BCOND,    IFMT },
    { OP_J,     JFMT }, { OP_JAL,   JFMT },
    { OP_BEQ,   IFMT }, { OP_BNE,   IFMT },
    { OP_BLEZ,  IFMT }, { OP_BGTZ,  IFMT },
    { OP_ADDI,  IFMT }, { OP_ADDIU, IFMT },
    { OP_SLTI,  IFMT }, { OP_SLTIU, IFMT },
    { OP_ANDI,  IFMT }, { OP_ORI,   IFMT },
    { OP_XORI,  IFMT }, { OP_LUI,   IFMT },
    { OP_UNIMP, IFMT }, { OP_UNIMP, IFMT },
    { OP_UNIMP, IFMT }, { OP_UNIMP, IFMT },
    { OP_RES,   IFMT }, { OP_RES,   IFMT },
    { OP_RES,   IFMT }, { OP_RES,   IFMT },
    { OP_RES,   IFMT }, { OP_RES,   IFMT },
    { OP_RES,   IFMT }, { OP_RES,   IFMT },
    { OP_RES,   IFMT }, { OP_RES,   IFMT },
    { OP_RES,   IFMT }, { OP_RES,   IFMT },
    { OP_LB,    IFMT }, { OP_LH,    IFMT },
    { OP_LWL,   IFMT }, { OP_LW,    IFMT },
    { OP_LBU,   IFMT }, { OP_LHU,   IFMT },
    { OP_LWR,   IFMT }, { OP_RES,   IFMT },
    { OP_SB,    IFMT }, { OP_SH,    IFMT },
    { OP_SWL,   IFMT }, { OP_SW,    IFMT },
    { OP_RES,   IFMT }, { OP_RES,   IFMT },
    { OP_SWR,   IFMT }, { OP_RES,   IFMT },
    { OP_UNIMP, IFMT }, { OP_UNIMP, IFMT },
    { OP_UNIMP, IFMT }, { OP_UNIMP, IFMT },
    { OP_RES,   IFMT }, { OP_RES,   IFMT },
    { OP_RES,   IFMT }, { OP_RES,   IFMT },
    { OP_UNIMP, IFMT }, { OP_UNIMP, IFMT },
    { OP_UNIMP, IFMT }, { OP_UNIMP, IFMT },
    { OP_RES,   IFMT }, { OP_RES,   IFMT },
    { OP_RES,   IFMT }, { OP_RES,   IFMT }
};

const int SPECIAL_TABLE[] = {
    OP_SLL,     OP_RES,   OP_SRL,  OP_SRA,
    OP_SLLV,    OP_RES,   OP_SRLV, OP_SRAV,
    OP_JR,      OP_JALR,  OP_RES,  OP_RES,
    OP_SYSCALL, OP_UNIMP, OP_RES,  OP_RES,
    OP_MFHI,    OP_MTHI,  OP_MFLO, OP_MTLO,
    OP_RES,     OP_RES,   OP_RES,  OP_RES,
    OP_MULT,    OP_MULTU, OP_DIV,  OP_DIVU,
    OP_RES,     OP_RES,   OP_RES,  OP_RES,
    OP_ADD,     OP_ADDU,  OP_SUB,  OP_SUBU,
    OP_AND,     OP_OR,    OP_XOR,  OP_NOR,
    OP_RES,     OP_RES,   OP_SLT,  OP_SLTU,
    OP_RES,     OP_RES,   OP_RES,  OP_RES,
    OP_RES,     OP_RES,   OP_RES,  OP_RES,
    OP_RES,     OP_RES,   OP_RES,  OP_RES,
    OP_RES,     OP_RES,   OP_RES,  OP_RES,
    OP_RES,     OP_RES,   OP_RES,  OP_RES
};

const struct OpString OP_STRINGS[] = {
    { "Should not happen", { NONE,  NONE,  NONE  }},
    { "ADD r%d,r%d,r%d",   { RD,    RS,    RT    }},
    { "ADDI r%d,r%d,%d",   { RT,    RS,    EXTRA }},
    { "ADDIU r%d,r%d,%d",  { RT,    RS,    EXTRA }},
    { "ADDU r%d,r%d,r%d",  { RD,    RS,    RT    }},
    { "AND r%d,r%d,r%d",   { RD,    RS,    RT    }},
    { "ANDI r%d,r%d,%d",   { RT,    RS,    EXTRA }},
    { "BEQ r%d,r%d,%d",    { RS,    RT,    EXTRA }},
    { "BGEZ r%d,%d",       { RS,    EXTRA, NONE  }},
    { "BGEZAL r%d,%d",     { RS,    EXTRA, NONE  }},
    { "BGTZ r%d,%d",       { RS,    EXTRA, NONE  }},
    { "BLEZ r%d,%d",       { RS,    EXTRA, NONE  }},
    { "BLTZ r%d,%d",       { RS,    EXTRA, NONE  }},
    { "BLTZAL r%d,%d",     { RS,    EXTRA, NONE  }},
    { "BNE r%d,r%d,%d",    { RS,    RT,    EXTRA }},
    { "Should not happen", { NONE,  NONE,  NONE  }},
    { "DIV r%d,r%d",       { RS,    RT,    NONE  }},
    { "DIVU r%d,r%d",      { RS,    RT,    NONE  }},
    { "J %d",              { EXTRA, NONE,  NONE  }},
    { "JAL %d",            { EXTRA, NONE,  NONE  }},
    { "JALR r%d,r%d",      { RD,    RS,    NONE  }},
    { "JR r%d,r%d",        { RD,    RS,    NONE  }},
    { "LB r%d,%d(r%d)",    { RT,    EXTRA, RS    }},
    { "LBU r%d,%d(r%d)",   { RT,    EXTRA, RS    }},
    { "LH r%d,%d(r%d)",    { RT,    EXTRA, RS    }},
    { "LHU r%d,%d(r%d)",   { RT,    EXTRA, RS    }},
    { "LUI r%d,%d",        { RT,    EXTRA, NONE  }},
    { "LW r%d,%d(r%d)",    { RT,    EXTRA, RS    }},
    { "LWL r%d,%d(r%d)",   { RT,    EXTRA, RS    }},
    { "LWR r%d,%d(r%d)",   { RT,    EXTRA, RS    }},
    { "Should not happen", { NONE,  NONE,  NONE  }},
    { "MFHI r%d",          { RD,    NONE,  NONE  }},
    { "MFLO r%d",          { RD,    NONE,  NONE  }},
    { "Should not happen", { NONE,  NONE,  NONE  }},
    { "MTHI r%d",          { RS,    NONE,  NONE  }},
    { "MTLO r%d",          { RS,    NONE,  NONE  }},
    { "MULT r%d,r%d",      { RS,    RT,    NONE  }},
    { "MULTU r%d,r%d",     { RS,    RT,    NONE  }},
    { "NOR r%d,r%d,r%d",   { RD,    RS,    RT    }},
    { "OR r%d,r%d,r%d",    { RD,    RS,    RT    }},
    { "ORI r%d,r%d,%d",    { RT,    RS,    EXTRA }},
    { "RFE",               { NONE,  NONE,  NONE  }},
    { "SB r%d,%d(r%d)",    { RT,    EXTRA, RS    }},
    { "SH r%d,%d(r%d)",    { RT,    EXTRA, RS    }},
    { "SLL r%d,r%d,%d",    { RD,    RT,    EXTRA }},
    { "SLLV r%d,r%d,r%d",  { RD,    RT,    RS    }},
    { "SLT r%d,r%d,r%d",   { RD,    RS,    RT    }},
    { "SLTI r%d,r%d,%d",   { RT,    RS,    EXTRA }},
    { "SLTIU r%d,r%d,%d",  { RT,    RS,    EXTRA }},
    { "SLTU r%d,r%d,r%d",  { RD,    RS,    RT    }},
    { "SRA r%d,r%d,%d",    { RD,    RT,    EXTRA }},
    { "SRAV r%d,r%d,r%d",  { RD,    RT,    RS    }},
    { "SRL r%d,r%d,%d",    { RD,    RT,    EXTRA }},
    { "SRLV r%d,r%d,r%d",  { RD,    RT,    RS    }},
    { "SUB r%d,r%d,r%d",   { RD,    RS,    RT    }},
    { "SUBU r%d,r%d,r%d",  { RD,    RS,    RT    }},
    { "SW r%d,%d(r%d)",    { RT,    EXTRA, RS    }},
    { "SWL r%d,%d(r%d)",   { RT,    EXTRA, RS    }},
    { "SWR r%d,%d(r%d)",   { RT,    EXTRA, RS    }},
    { "XOR r%d,r%d,r%d",   { RD,    RS,    RT    }},
    { "XORI r%d,r%d,%d",   { RT,    RS,    EXTRA }},
    { "SYSCALL",           { NONE,  NONE,  NONE  }},
    { "Unimplemented",     { NONE,  NONE,  NONE  }},
    { "Reserved",          { NONE,  NONE,  NONE  }}
};
